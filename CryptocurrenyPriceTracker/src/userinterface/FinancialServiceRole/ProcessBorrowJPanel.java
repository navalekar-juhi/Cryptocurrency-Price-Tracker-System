/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.FinancialServiceRole;

import Business.Account.Account;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Investment.Investment;
import Business.Network.Network;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BorrowCoinsWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Pramathesh Navalekar
 */
public class ProcessBorrowJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private BorrowCoinsWorkRequest dwr;
    private EcoSystem business;
    private Enterprise enterprise;
    private UserAccount account;
    private int iAvailableQnty;
    private Investment investment;

    /**
     * Creates new form ProcessBorrowJPanel
     */
    public ProcessBorrowJPanel(JPanel userProcessContainer, BorrowCoinsWorkRequest dwr, EcoSystem business, Enterprise enterprise, UserAccount account) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.dwr = dwr;
        this.business = business;
        this.enterprise = enterprise;
        this.account = account;
        txtCryptoSymbol.setText(dwr.getBorrowCoin().getCoin().getSymbol());
        txtQuantity.setText(String.valueOf(dwr.getBorrowCoin().getQuantity()));
        txtAmount.setText(String.valueOf(dwr.getBorrowCoin().investmentAmount()));
        populateQuantity();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtCryptoSymbol = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtAvailableQuantity = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();

        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setText("Crypto Name:");

        txtCryptoSymbol.setEditable(false);
        txtCryptoSymbol.setBackground(new java.awt.Color(255, 255, 255));
        txtCryptoSymbol.setEnabled(false);

        jLabel2.setForeground(new java.awt.Color(0, 153, 153));
        jLabel2.setText("Quantity:");

        txtQuantity.setEditable(false);
        txtQuantity.setBackground(new java.awt.Color(255, 255, 255));
        txtQuantity.setEnabled(false);

        jLabel4.setForeground(new java.awt.Color(0, 153, 153));
        jLabel4.setText("Amount:");

        txtAmount.setEditable(false);
        txtAmount.setBackground(new java.awt.Color(255, 255, 255));
        txtAmount.setEnabled(false);

        jLabel3.setForeground(new java.awt.Color(0, 153, 153));
        jLabel3.setText("Available Quantity:");

        txtAvailableQuantity.setEditable(false);
        txtAvailableQuantity.setBackground(new java.awt.Color(255, 255, 255));
        txtAvailableQuantity.setEnabled(false);

        btnBack.setForeground(new java.awt.Color(0, 153, 153));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnProcess.setForeground(new java.awt.Color(0, 153, 153));
        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(71, 71, 71)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnBack)
                            .addGap(108, 108, 108)
                            .addComponent(btnProcess))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addGap(28, 28, 28)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtCryptoSymbol)
                                .addComponent(txtQuantity)
                                .addComponent(txtAvailableQuantity)
                                .addComponent(txtAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))))
                    .addContainerGap(72, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtCryptoSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(29, 29, 29)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3)
                        .addComponent(txtAvailableQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(75, 75, 75)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBack)
                        .addComponent(btnProcess))
                    .addContainerGap(24, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents
    public void populateQuantity() {
        for (Investment i : enterprise.getEnterpriseInvestment()) {
            if (i.getCoin().getSymbol().matches(dwr.getBorrowCoin().getCoin().getSymbol())) {
                iAvailableQnty = i.getQuantity();
                txtAvailableQuantity.setText(String.valueOf(i.getQuantity()));
                investment = i;
            }
        }
    }
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        Component[] components = userProcessContainer.getComponents();
        for (Component c : components) {
            if (c instanceof BuyCoinsWorkJPanel) {
                BorrowCoinsJPanel borrowcoinsWorkJPanel = (BorrowCoinsJPanel) c;
                borrowcoinsWorkJPanel.populateTable();
            }
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        if (iAvailableQnty >= (dwr.getBorrowCoin().getQuantity())) {
            dwr.setStatus("Completed");
            dwr.setResolveDate(new Date());
            int balQnty = iAvailableQnty - (dwr.getBorrowCoin().getQuantity());
            investment.setQuantity(balQnty);
            double bal = (enterprise.getEnterpriseAcnt().getBal()) + (dwr.getAmount());
            enterprise.getEnterpriseAcnt().setBal(bal);

            for (Network n : business.getNetworkList()) {
                if (n.getName().equalsIgnoreCase(dwr.getsNetwork())) {
                    for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                        if (e.getName().equalsIgnoreCase(dwr.getsEnterprise())) {
                            for (Investment item : e.getEnterpriseInvestment()) {
                                if (item.getCoin().getSymbol().equalsIgnoreCase(dwr.getBorrowCoin().getCoin().getSymbol())) {
                                    int borrowQnty = item.getQuantity() + (dwr.getBorrowCoin().getQuantity());
                                    item.setQuantity(borrowQnty);
                                }
                            }
                        }
                        //update balance
                        for (Account a : e.getAccountList()) {
                            {
                                double balance = a.getBal() - (dwr.getAmount());
                                a.setBal(balance);
                            }
                        }
                    }
                }
            }
            JOptionPane.showMessageDialog(null, "Request processed successfully");
            btnProcess.setEnabled(false);
        } 
        System.out.println("Borrow request processed and sent to financial organization");
    }//GEN-LAST:event_btnProcessActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnProcess;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtAvailableQuantity;
    private javax.swing.JTextField txtCryptoSymbol;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
