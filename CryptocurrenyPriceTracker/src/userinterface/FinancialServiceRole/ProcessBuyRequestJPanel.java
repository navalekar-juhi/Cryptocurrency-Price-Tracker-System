/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.FinancialServiceRole;

import Business.Account.Account;
import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Investment.Investment;
import Business.Investment.InvestmentDirectory;
import Business.Network.Network;
import Business.Organization.FinancialServiceOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BorrowCoinsWorkRequest;
import Business.WorkQueue.BuyCoinsWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Pramathesh Navalekar
 */
public class ProcessBuyRequestJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private BuyCoinsWorkRequest bwr;
    private EcoSystem business;
    private Enterprise enterprise;
    private UserAccount account;
    private int iAvailableQnty;
    private Investment investment;

    /**
     * Creates new form ProcessBuyRequestJPanel
     */
    public ProcessBuyRequestJPanel(JPanel userProcessContainer, BuyCoinsWorkRequest bwr, EcoSystem business, Enterprise enterprise, UserAccount account) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.bwr = bwr;
        this.business = business;
        this.enterprise = enterprise;
        this.account = account;
        txtCryptoSymbol.setText(bwr.getBuyCoins().getCoin().getSymbol());
        txtQuantity.setText(String.valueOf(bwr.getBuyCoins().getQuantity()));
        txtAmount.setText(String.valueOf(bwr.getBuyCoins().investmentAmount()));
        populateQuantity();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        btnBorrow = new javax.swing.JButton();
        txtCryptoSymbol = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        txtAvailableQuantity = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnReject = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setText("Crypto Name:");

        jLabel2.setForeground(new java.awt.Color(0, 153, 153));
        jLabel2.setText("Quantity:");

        jLabel3.setForeground(new java.awt.Color(0, 153, 153));
        jLabel3.setText("Available Quantity:");

        btnBack.setBackground(new java.awt.Color(255, 255, 255));
        btnBack.setForeground(new java.awt.Color(0, 153, 153));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnProcess.setBackground(new java.awt.Color(255, 255, 255));
        btnProcess.setForeground(new java.awt.Color(0, 153, 153));
        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        btnBorrow.setBackground(new java.awt.Color(255, 255, 255));
        btnBorrow.setForeground(new java.awt.Color(0, 153, 153));
        btnBorrow.setText("Request For Coins");
        btnBorrow.setEnabled(false);
        btnBorrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrowActionPerformed(evt);
            }
        });

        txtCryptoSymbol.setEditable(false);
        txtCryptoSymbol.setBackground(new java.awt.Color(255, 255, 255));
        txtCryptoSymbol.setEnabled(false);

        txtQuantity.setEditable(false);
        txtQuantity.setBackground(new java.awt.Color(255, 255, 255));
        txtQuantity.setEnabled(false);

        txtAvailableQuantity.setEditable(false);
        txtAvailableQuantity.setBackground(new java.awt.Color(255, 255, 255));
        txtAvailableQuantity.setEnabled(false);

        jLabel4.setForeground(new java.awt.Color(0, 153, 153));
        jLabel4.setText("Amount:");

        txtAmount.setEditable(false);
        txtAmount.setBackground(new java.awt.Color(255, 255, 255));
        txtAmount.setEnabled(false);

        jLabel5.setFont(new java.awt.Font("Lucida Bright", 1, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 153, 153));
        jLabel5.setText("Buy Request");

        btnReject.setBackground(new java.awt.Color(255, 255, 255));
        btnReject.setForeground(new java.awt.Color(0, 153, 153));
        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(18, 18, 18)
                        .addComponent(btnReject)
                        .addGap(39, 39, 39)
                        .addComponent(btnProcess)
                        .addGap(59, 59, 59)
                        .addComponent(btnBorrow))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtCryptoSymbol)
                            .addComponent(txtQuantity)
                            .addComponent(txtAvailableQuantity)
                            .addComponent(txtAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(120, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel5)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCryptoSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(txtAvailableQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnProcess)
                    .addComponent(btnBorrow)
                    .addComponent(btnReject))
                .addContainerGap(153, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    public void populateQuantity() {
        for (Investment i : enterprise.getEnterpriseInvestment()) {
            if (i.getCoin().getSymbol().matches(bwr.getBuyCoins().getCoin().getSymbol())) {
                iAvailableQnty = i.getQuantity();
                txtAvailableQuantity.setText(String.valueOf(i.getQuantity()));
                investment = i;
            }
        }
    }
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        Component[] components = userProcessContainer.getComponents();
        for (Component c : components) {
            if (c instanceof BuyCoinsWorkJPanel) {
                BuyCoinsWorkJPanel buycoinsWorkJPanel = (BuyCoinsWorkJPanel) c;
                buycoinsWorkJPanel.populateTable();
            }
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        if (iAvailableQnty >= (bwr.getBuyCoins().getQuantity())) {
            bwr.setStatus("Completed");
            bwr.setResolveDate(new Date());
            int balQnty = iAvailableQnty - (bwr.getBuyCoins().getQuantity());
            investment.setQuantity(balQnty);
            double bal = (enterprise.getEnterpriseAcnt().getBal()) + (bwr.getdAmount());
            enterprise.getEnterpriseAcnt().setBal(bal);
            Customer c = (Customer) business.getCustomerDirectory().searchCustomer(bwr.getSender().getUsername());
            if (c.getCoinDetails().size() > 0) {
                for (Investment custInst : c.getCoinDetails()) {
                    if (custInst.getCoin().getSymbol().matches(bwr.getBuyCoins().getCoin().getSymbol())) {
                        int buyQnty = custInst.getQuantity() + (bwr.getBuyCoins().getQuantity());
                        custInst.setQuantity(buyQnty);
                    } //add new in list
                    else {
                        c.getCoinDetails().add(bwr.getBuyCoins());
                    }
                }
            } else {
                c.getCoinDetails().add(bwr.getBuyCoins());
            }
            //update balance
            for (Account a : c.getAccountList()) {
                if (a.getBankName().matches(bwr.getCustomerAccount()) && a.getType().matches("Checking")) {
                    double balance = a.getBal() - (bwr.getdAmount());
                    a.setBal(balance);
                }
            }
            InvestmentDirectory id = new InvestmentDirectory();
            id.setInvestmentList(bwr.getBuyCoins());
            id.setType("Buy");
            c.getCurrentInvestment().add(id);
            JOptionPane.showMessageDialog(null, "Request processed successfully");
            btnProcess.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(null, "Insufficient Coin Balance");
            btnBorrow.setEnabled(true);
            btnProcess.setEnabled(false);
        }
        System.out.println("Request processed and trade for buy is processed");
    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnBorrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrowActionPerformed
        // TODO add your handling code here:
        System.out.println("Insufficient balance.Hence financial organization requests for coins from another financial organization");
        BorrowCoinsWorkRequest cwr = new BorrowCoinsWorkRequest();
        //cwr.setdAmount(Double.parseDouble(txtAmount.getText()));
        cwr.setsNetwork(bwr.getsNetwork());
        cwr.setsEnterprise(enterprise.getName());
        cwr.setSender(account);
        cwr.setRequestDate(new Date());
        cwr.setStatus("Requested");
        cwr.getBorrowCoin().getCoin().setSymbol(bwr.getBuyCoins().getCoin().getSymbol());
        cwr.getBorrowCoin().getCoin().setdPrice(bwr.getBuyCoins().getCoin().getdPrice());
        cwr.getBorrowCoin().setQuantity(bwr.getBuyCoins().getQuantity());
        cwr.getBorrowCoin().setdPrice(bwr.getBuyCoins().getCoin().getdPrice());
        for (Network n : business.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                    if (o instanceof FinancialServiceOrganization) {
                        o.getWorkQueue().getWorkRequestList().add(cwr);
                    }
                }
            }
            
        }
        account.getWorkQueue().getWorkRequestList().add(cwr);
        JOptionPane.showMessageDialog(null, "Request message sent");
        btnProcess.setEnabled(false);
    }//GEN-LAST:event_btnBorrowActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
       bwr.setStatus("Rejected");
       bwr.setResolveDate(new Date());
       bwr.setMessage("Rejected");
       btnProcess.setEnabled(false);
       btnBorrow.setEnabled(false);
       JOptionPane.showMessageDialog(null, "Request is rejected");
    }//GEN-LAST:event_btnRejectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBorrow;
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnReject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtAvailableQuantity;
    private javax.swing.JTextField txtCryptoSymbol;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
